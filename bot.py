import asyncio
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler, Updater

from credentials import ChatGPT_TOKEN, TG_token
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler

import logging


#
# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ–Ω—é
MENU_MAIN, MENU_OPTION1, MENU_OPTION2, MENU_OPTION3 = range(4)

chat_gpt = ChatGptService(ChatGPT_TOKEN)

commands_menu = {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'echo': '–≠–•–û - –ë–û–¢',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'cancel': '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, commands_menu)
    return MENU_MAIN

# –ó–∞–¥–∞—á–∞ 1. –î–≤–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ —Ñ—É–Ω–∫—Ü–∏—é –≠–•–û,
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –≠–•–û –ë–æ—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n"
        "–ò–ª–∏ /back –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    return MENU_OPTION1



# –ó–∞–¥–∞—á–∞ 2. –†–∞–Ω–¥–æ–º–Ω—ã–π –§–∞–∫—Ç
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç.\n"
        "/random –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n"
        "–ò–ª–∏ /back –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await handle_random(update, context)
    return MENU_OPTION2

# –ó–∞–¥–∞—á–∞ 3. ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, 'gpt')
    await update.message.reply_text(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é gpt.\n"
        "–ü–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n"
        "–ò–ª–∏ /back –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    return MENU_OPTION3
async def handle_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ü—Ä–æ–º–ø—Ç
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param update:
    :param context:
    :return:
    '''

    text = update.message.text
    chat_gpt.set_prompt('gpt')
    #answer = await chat_gpt.send_message_list()
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)
    return MENU_OPTION3


async def handle_echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
# –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ–Ω—é echo
    await update.message.reply_text(update.message.text)
    return MENU_OPTION1

async def handle_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
# –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ–Ω—é –æ–ø—Ü–∏–∏ 2
#     await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é 2 –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {update.message.text}")
# –ó–∞–≥—Ä—É–∑–∏–ª–∏ –ü—Ä–æ–º–ø—Ç
    prompt = load_prompt('random')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await send_image(update, context, 'random')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Ç
    text = load_message('random')
    # –û—Ç–ø—Ä–∞—è–µ–º —Ç–µ–∫—Å—Ç –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    message = await send_text(update, context, text)
    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç–∞ –ì–ü–¢
    answer = await chat_gpt.send_question(prompt, text)
    # –º–µ–Ω—è–µ–º —Å–æ–æ–±–µ—â–µ–Ω–∏–µ
    await message.edit_text(answer)
    return MENU_OPTION2



#—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return MENU_MAIN

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    app = ApplicationBuilder().token(TG_token).build()

    conv_handler = ConversationHandler(
        #–Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        entry_points=[CommandHandler('start', start)],
        states={
            MENU_MAIN: [
                CommandHandler('echo', echo),
                CommandHandler('random', random),
                CommandHandler('gpt', gpt),
            ],
            MENU_OPTION1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_echo),
                CommandHandler('back', back_to_main)
            ],
            MENU_OPTION2: [
                CommandHandler('random', handle_random),
                CommandHandler('back', back_to_main)
            ],
            MENU_OPTION3: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gpt),
                CommandHandler('back', back_to_main)
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == '__main__':
    main()
